perror()
strerror()
equation : nb_fourmis_i = (F + Sum Pn - (n * P_i)) / n

TODO

BFS / EK :
-Ameliorer algo pour gerer les salles pourries

Global :
-Norme
-protection retour malloc : malloc ft_init_final_room leaks si NULL
-choisir nombre max fourmis autorise


Visualiseur :
-integrer la verification des doublons de coordonnee dans le parser
(Copier le code C en python)
-Attention aux coordonnees en int max ou int min (coordonnees toutes acceptes dans le programme de C tant que caracteres numeriques)





Tests Putes :

Error ou prendre la salle, etre coherent
Pour l'instant : OK
##start
##start
##start
room 1 1

Pour le moment : On affiche ok et on prend la deuxieme salle
Etre coherent avec le reste
##start
room 1 1
##start
room 2 2

OK
Doit etre ok
##start
##unknown
##unknown
room 1 1

OK
Invalide : apres pipes, on ne prend que des commandes ou des commentaires mais pas d'acquisision de salles
room1-room2
##start
start 1 1






Questions a poser :


les lignes commençant par un ## sont des commandes modifiant les propriétés de
la ligne significative qui vient juste après.
-> 
##start
##start
room 1 1
Error ou pas ?

##start
room1 1 1
##start
room2 2 2
Error ou pas ?

##start
##unknown
room 1 1
Error ou pas ?

Coordonnees en doublon : Error ou pas ?

Salle reliee a elle meme : OK ?
Deux ou + chemins entre deux salles : OK ?






Systeme Bassel : Ponderer les salles selon distance a l'origine et (autoriser visite salles deja visitees)

Systeme Romain/Corentin : Si apres une remontee

Systeme Drew/Barth : Remontee obligatoire la premiere fois. Si salle d'avant visitee pendant ce BFS par une autre remontee


Si j'arrive sur un noeud qui a deja un flot a 1 :
-Si je ne suis pas encore remonte, je suis OBLIGE de remonter (Si poid salle d'arrivee est inferieur, je m'arrete)
-Si je suis deja remonte, j'explore dans toutes les directions

Si une salle est deja visitee mais poid inferieur, je deviens la source de cette salle et je ne vais pas par la


Limite potentielle a ne pas recalculer tous les poids du chemin lors d'un changement de source : une autre sonde pourrait mal casser le chemin


Si remontee et salle arrivee a elle meme ete deja visitee
Alors on la rajoute a la file et on passe un flag a 1 + on ajoute 2eme source
Quand on reviendra dessus dans la file, on ne fait que du descendant



Lors d'une remontee j'arrive sur une salle deja visitee.
J'ouvre une recursion.
La recursion effectue un BFS descendant


